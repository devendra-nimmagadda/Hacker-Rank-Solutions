import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
import java.util.stream.Stream;
public class Solution {

    static int sherlockAndAnagrams(String s) {
        int count = 0;
        char[] chars = s.toCharArray();
        if(s.length() == Stream.of(chars).distinct().count())
            return 0;
        for(int k=1; k<chars.length; k++) {
            for(int i=0; i<chars.length-k+1; i++) {
                String c = s.substring(i, i+k);
                Map<Character, Integer> map = getMap(c.toCharArray());
                for (int j=i+1; j<chars.length-k+1; j++) {                    
                    Map<Character, Integer> map2 = getMap(s.substring(j, j+k).toCharArray());
                    if(compareMap(map, map2))
                        count++;
                }            
            }
        }            
        
        return count;
    }    
    
    private static Map<Character, Integer> getMap(char[] arr) {
        Map<Character, Integer> map = new HashMap<>();
        for(char c: arr) {
            if(map.get(c) != null) {
                map.put(c, map.get(c) + 1);
            } else {
                map.put(c, 1);
            }
        }
        
        
        return map;
    }
    
    
    private static boolean compareMap(Map<Character, Integer> map, Map<Character, Integer> map2) {        
        for(Character c: map.keySet()) {
            if(map2.get(c) != map.get(c))
                return false;
        }        
        
        return true;
        
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String s = scanner.nextLine();

            int result = sherlockAndAnagrams(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
