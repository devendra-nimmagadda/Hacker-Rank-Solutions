import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
import java.util.stream.*;
public class Solution {

    // Complete the gemstones function below.
    static int gemstones(String[] arr) {
       
        Set<Character> result = new HashSet<>();
        boolean flag = false;
        for(String s:arr) {
            String str = s.trim();
            Set<Character> set = IntStream.range(0, str.length())
                    .mapToObj(x->str.toCharArray()[x])
                    .collect(Collectors.toSet());
            if(result.isEmpty() & !flag) {
                result.addAll(set);
                flag = true;
            }
            else 
                result.retainAll(set);
        }        
        return result.size();
    
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String[] arr = new String[n];

        for (int i = 0; i < n; i++) {
            String arrItem = scanner.nextLine();
            arr[i] = arrItem;
        }

        int result = gemstones(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
