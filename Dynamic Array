import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    // Complete the dynamicArray function below.
    static List<Integer> dynamicArray(int n, List<List<Integer>> queries) {
        
        int lastAns = 0;
        List<Integer> result = new ArrayList<>();
        List<List<Integer>> seqList = new ArrayList<>();
        if(n < 1)
            return result;
        IntStream.range(0, n).forEach(x-> seqList.add(new ArrayList<>()));
                
        for(List<Integer> query : queries) {
            if(query.size() == 3) {
                int type = query.get(0);
                int x = query.get(1);
                int y = query.get(2);
                if (x <0 || y<0)
                    continue;
                switch(type) {
                    case 1:
                        int seq = (int) ((x^lastAns)%n);
                        if(seqList.get(seq) != null)
                            seqList.get(seq).add(y);
                        break;
                    case 2:
                        seq = (int) ((x^lastAns)%n);
                        if(seqList.get(seq) != null) {
                            lastAns = seqList.get(seq).get(y % seqList.get(seq).size());
                            result.add(lastAns);
                        }
                        break;
                }
            }            
        }

        return result;
    
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nq = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(nq[0]);

        int q = Integer.parseInt(nq[1]);

        List<List<Integer>> queries = new ArrayList<>();

        IntStream.range(0, q).forEach(i -> {
            try {
                queries.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        List<Integer> result = dynamicArray(n, queries);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
