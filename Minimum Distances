import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
import java.util.stream.Collectors;
public class Solution {

    // Complete the minimumDistances function below.
    static int minimumDistances(int[] a) {

        int d = Integer.MAX_VALUE;
        Map<Integer, String> map = new HashMap<Integer, String>();
        for(int i=0;i<a.length; i++) {
            if(map.get(a[i]) == null) {
                map.put(a[i], String.valueOf(i));
            } else {
                map.put(a[i], map.get(a[i])+"-"+String.valueOf(i));
            }
        }
        List<String> list = map.values()
                                .stream()
                                .filter(x-> x.split("-").length > 1)
                                .collect(Collectors.toList());
        for(String x:list) {
            String[] s = x.split("-");
            int dist = Integer.valueOf(s[s.length-1]) - Integer.valueOf(s[s.length-2]);
            if(dist < d)
                d = dist;
        }
        return d == Integer.MAX_VALUE?-1:d;        
    

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] a = new int[n];

        String[] aItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int aItem = Integer.parseInt(aItems[i]);
            a[i] = aItem;
        }

        int result = minimumDistances(a);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
