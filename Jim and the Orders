import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the jimOrders function below.
    static int[] jimOrders(int[][] orders) {
        
        Map<Integer, String> map = new TreeMap<>();
        List<Integer> list = new ArrayList<>();
        for(int i=0; i<orders.length; i++) {
            int x = orders[i][0] + orders[i][1];
            if(map.get(x) == null) {
                map.put(x, String.valueOf(i+1));
            } else {
                map.put(x, map.get(x)+"-"+(i+1));
            }
        }
        for(Integer i:map.keySet()) {
            String[] s = map.get(i).split("-");
            if(s.length > 1) {
                for(String val:s) 
                    list.add(Integer.valueOf(val));
            } else {
                list.add(Integer.valueOf(s[0]));
            }
        }
        return list.stream().mapToInt(x->x).toArray();
    
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[][] orders = new int[n][2];

        for (int i = 0; i < n; i++) {
            String[] ordersRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 2; j++) {
                int ordersItem = Integer.parseInt(ordersRowItems[j]);
                orders[i][j] = ordersItem;
            }
        }

        int[] result = jimOrders(orders);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));

            if (i != result.length - 1) {
                bufferedWriter.write(" ");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
