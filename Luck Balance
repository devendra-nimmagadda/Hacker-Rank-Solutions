import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the luckBalance function below.    

    static long luckBalance(int k, int[][] contests) {
        long luckBal = 0;
        List<Integer> list = new ArrayList<>();
        if(k>0) {            
            for(int i=0; i<contests.length; i++) {
                if(contests[i][1] == 1)
                    list.add(contests[i][0]);
            }
            
            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {                
                    return o2.compareTo(o1);
                }            
            });
            list = k<=list.size()?list.subList(0, k):list.subList(0, list.size());
        }
        
        for(int i=0; i<contests.length; i++) {
            if(contests[i][1] == 1) {
                if(k>0 && list.contains(contests[i][0])) {
                    k--;
                    luckBal+= contests[i][0];
                } else {
                    luckBal-= contests[i][0];
                }
            } else if(contests[i][1] == 0) {
                luckBal+= contests[i][0];
            }
        }
        
        return luckBal;
    }
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nk = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nk[0]);

        int k = Integer.parseInt(nk[1]);

        int[][] contests = new int[n][2];

        for (int i = 0; i < n; i++) {
            String[] contestsRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 2; j++) {
                int contestsItem = Integer.parseInt(contestsRowItems[j]);
                contests[i][j] = contestsItem;
            }
        }

        long result = luckBalance(k, contests);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
